---
type Props = {
  name: string;
};

import { readFile } from "node:fs/promises";
import Link from "./Link.astro";

import { codeToHtml } from "shiki";
import { transformerTwoslash, rendererClassic } from "@shikijs/twoslash";
import "@shikijs/twoslash/style-classic.css";

const { name } = Astro.props;

const fileText = await readFile(`${process.cwd()}/problems/${name}.ts`);

const html = await codeToHtml(fileText.toString(), {
  lang: "ts",
  theme: "vitesse-dark",
  transformers: [
    transformerTwoslash({
      renderer: rendererClassic(),
    }),
  ],
});

let title = name
  .split("-")
  .map((s) => s.charAt(0).toUpperCase() + s.slice(1))
  .join(" ");

try {
  const req = await fetch("https://leetcode.com/graphql/", {
    method: "POST",
    body: JSON.stringify({
      query: `\n    query questionTitle($titleSlug: String!) {\n  question(titleSlug: $titleSlug) {\n    questionId\n    questionFrontendId\n    title\n    titleSlug\n    isPaidOnly\n    difficulty\n    likes\n    dislikes\n    categoryTitle\n  }\n}\n`,
      variables: {
        titleSlug: name,
      },
      operationName: "questionTitle",
    }),
    headers: {
      "Content-Type": "application/json",
    },
  });

  const json = await req.json();
  title = json.data.question.title;
} catch (e) {
  console.log("error fetching title", e);
}

const leetCodeUrl = `https://leetcode.com/problems/${name}`;

const dtsFileText = (
  await readFile(
    `${process.cwd()}/node_modules/flat-type-samurai/dist/index.d.ts`,
  )
).toString();
---

<style>
  .code-wrapper :global(pre) {
    @apply rounded-lg p-5;
  }
</style>

<div>
  <div class="mb-2 flex justify-between">
    <h2 class="text-2xl font-bold">{title}</h2>
    <Link href={leetCodeUrl} external>Original Problem</Link>
  </div>

  <div class="code-wrapper">
    <Fragment set:html={html} />
  </div>
</div>
